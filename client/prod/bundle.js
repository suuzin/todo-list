(()=>{"use strict";function t(){this.headerMenuElement=document.querySelector(".header__menu"),this.alarmElement=document.querySelector(".alarm-wrapper"),this.closeBtnElement=document.querySelector(".alarm__closeBtn"),this.menuAnimation=()=>{this.headerMenuElement.classList.toggle("no-display")},this.headerMenuElement.addEventListener("click",(()=>{this.alarmElement.style.animation="fadeInLeft 1s forwards",this.menuAnimation()})),this.closeBtnElement.addEventListener("click",(()=>{this.alarmElement.style.animation="fadeInRight 1s",this.menuAnimation()}))}const e=t=>JSON.parse(localStorage.getItem(t)),n=(t,n)=>{if(!n)return;const s=e("todos").findIndex((t=>t.id===n)),i=e("todos");for(const[e,n]of Object.entries(t))i[s][e]=n;localStorage.setItem("todos",JSON.stringify(i))},s=t=>{const n=e(t);return 0===n.length?0:n[n.length-1].id},i=(t,e)=>{e?(t.disabled=!0,t.classList.remove("bg-blue"),t.classList.add("bg-sky-blue")):(t.disabled=!1,t.classList.remove("bg-sky-blue"),t.classList.add("bg-blue"))};class o{constructor(t){this.title=t.title,this.firstStatus=t.firstStatus,this.status=t.status,this.time=t.time,this.user=t.userId,this.action=t.action}render=()=>`\n        <div class="alarm__inner">\n            <div class="alarm__icon">😀</div>\n            <div class="alarm__contents">\n                <p class="alarm__writer">${this.user}</p>\n                <p class="alarm__content">\n                ${this.firstStatus?`<strong>${this.title}</strong>를 <strong>${this.firstStatus}</strong>에서 <strong>${this.status}</strong>로 ${this.action}하였습니다.`:`<strong>${this.status}</strong>에 <strong>${this.title}</strong>를 ${this.action}하였습니다.`}\n                </p>\n                <p class="alarm__time">${this.time}전</p>\n            </div>\n        </div>\n    `}const a=t=>document.querySelector(t),d=t=>{const e=new o(t);a(".alarm").insertAdjacentHTML("afterbegin",e.render())},l=(t,n)=>{const i={};i.id=s("notices")+1,i.title=t.title,i.firstStatus=t.firstStatus,i.status=t.status,i.action=n,i.userId=1;const o=e("notices");return o.push(i),localStorage.setItem("notices",JSON.stringify(o)),i};class r{constructor(t,e,n,s){this.id=t.id,this.title=t.title,this.status=t.status,this.content=t.content,this.userId=t.userId,this.todoRender=e,this.setTodoData=n,this.todoHandleEventListener=s,this.editTodoElement=""}cacheElement=()=>{this.editTodoElement=document.getElementById(`${this.id}`)};render=()=>`\n        <article class="edit-input-wrapper">\n            <input class="edit-input-header" value =${this.title} placeholder="제목을 입력하세요" />\n            <textarea class="edit-input-content" placeholder="내용을 입력하세요" maxlength ='500' >${this.content}</textarea>\n            <div class="input-button-wrapper">\n                <button class="input__button input--cancel">취소</button>\n                <button class="input__button input--update bg-blue">수정</button>\n            </div>\n        </article>\n    `;editTemplate=()=>`\n      <header>\n        <h3 class="card__title">${this.title}</h3>\n        <button class="card__delete">x</button>\n      </header>\n      <div class="card__content">\n        <p class="card__content-text">${this.content}</p>\n      </div>\n      <div class="card__author">\n        <p class="card__author-text">author by ${this.userId}</p>\n      </div>`;handleEventListener=()=>{this.cacheElement(),this.editTodoElement.querySelector(".edit-input-header").addEventListener("input",this.onEditInputTitle),this.editTodoElement.querySelector(".edit-input-content").addEventListener("input",this.onEditInputContent),this.editTodoElement.querySelector(".input--cancel").addEventListener("click",this.onCloseBtn),this.editTodoElement.querySelector(".input--update").addEventListener("click",this.onUpdateBtn)};onEditInputTitle=({target:t})=>{this.title=t.value};onEditInputContent=({target:t})=>{if(t.classList.contains("edit-input-content")){const e=this.editTodoElement.querySelector(".input--update");0===t.value.length?i(e,!0):(this.content=t.value,i(e,!1))}};onCloseBtn=()=>{this.editTodoElement.outerHTML=this.todoRender(),this.todoHandleEventListener()};onUpdateBtn=()=>{const t={title:this.title,content:this.content,userId:this.userId};n(t,this.id),this.editTodoElement.classList.remove("todo-border"),this.todoHandleEventListener(),this.editTodoElement.innerHTML=this.editTemplate();const e={};e.id=this.id,e.title=this.title,e.content=this.content,e.userId=this.userid,this.setTodoData(e);const s={};s.title=this.title,s.status=this.status;const i=l(s,"수정");d(i),this.editTodoElement.setAttribute("data-drag",!0)}}class u{constructor(t,e,n,s){this.id=t,this.title=e,this.handleMinusCount=n,this.handleDeleteBtn=s}render=()=>`\n      <div class="modal">\n        <p class="modal__title">${this.title}</p>\n        <div class="modal-button__wrapper">\n          <button class="modal__button modal--close">취소</button>\n          <button class="modal__button modal--remove">확인</button>\n        </div>\n      </div>\n      <div class="modalBackground no-display"></div>\n      `;getOKFlag=()=>this.okFlag;showModal=()=>{document.body.insertAdjacentHTML("beforeend",this.render()),a(".modalBackground").classList.remove("no-display")};closeButton=()=>{a(".modal").remove(),a(".modalBackground").classList.add("no-display")};deleteButton=()=>{this.handleDeleteBtn(),this.closeButton()};handleEventListener=()=>{a(".modal--close").addEventListener("click",this.closeButton),a(".modal--remove").addEventListener("click",this.deleteButton)}}class c{constructor(t,e){this.todoData=t,this.todoElement="",this.handleMinusCount=e}cacheElement=()=>{this.todoElement=document.getElementById(`${this.todoData.id}`)};setTodoData=t=>{this.todoData=t};onMouseDown=t=>{if(!t.target.classList.contains("card__delete"))return"true"===t.currentTarget.getAttribute("data-drag")&&1===t.detail||2!==t.detail?void 0:(t.currentTarget.setAttribute("data-drag",!1),void this.showEditForm());this.onModal()};render=()=>`\n    <div class="start"></div>\n    <article class="card" id =${this.todoData.id} data-drag="true">\n        <header>\n          <h3 class="card__title">${this.todoData.title}</h3>\n          <button class="card__delete">x</button>\n        </header>\n        <div class="card__content">\n          <p class="card__content-text">${this.todoData.content}</p>\n        </div>\n        <div class="card__author">\n          <p class="card__author-text">author by ${this.todoData.userId}</p>\n        </div>\n      </article>\n    `;handleEventListener=()=>{this.cacheElement(),this.todoElement.addEventListener("mousedown",this.onMouseDown),this.todoElement.addEventListener("mouseover",this.onDeleteMouseOver),this.todoElement.addEventListener("mouseout",this.onDeleteMouseOut)};showEditForm=()=>{const t={id:this.todoData.id,title:this.todoData.title,status:this.todoData.status,content:this.todoData.content,userId:this.todoData.userId},e=new r(t,this.render,this.setTodoData,this.handleEventListener);this.todoElement.classList.add("todo-border"),this.todoElement.innerHTML=e.render(),e.handleEventListener()};onDeleteMouseOver=({target:t})=>{t.classList.contains("card__delete")&&this.todoElement.classList.add("card__delete--mouseOver")};onDeleteMouseOut=()=>{this.todoElement.classList.remove("card__delete--mouseOver")};onModal=()=>{const t=new u(this.todoData.id,"선택한 카드를 삭제할까요?",this.handleMinusCount,this.handleDeleteBtn);t.showModal(),t.handleEventListener()};handleDeleteBtn=()=>{const t=e("todos").filter((t=>t.id!==Number(this.todoData.id)));localStorage.setItem("todos",JSON.stringify(t)),this.handleMinusCount(),document.getElementById(`${this.todoData.id}`)?.remove();const n=l(this.todoData,"삭제");d(n)}}class h{constructor(t,e,n,s){this.status=t,this.title="",this.content="",this.setOnInput=e,this.handleAddCount=n,this.handleMinusCount=s}onInputContent=({target:t})=>{t.style.height="1px",t.style.height=12+t.scrollHeight+"px";const e=a(`.input-${this.status} .input--register`);0===t.value.length?i(e,!0):(this.content=t.value,i(e,!1))};onInputHeader=({target:t})=>{this.title=t.value};onCloseBtn=()=>{a(`.input-${this.status}`)?.remove(),this.setOnInput(!1)};createTodo=()=>{const t={};t.id=s("todos")+1,t.title=this.title,t.content=this.content,t.status=this.status,t.userId=1;const n=e("todos");return n.push(t),localStorage.setItem("todos",JSON.stringify(n)),t};onRegisterBtn=()=>{if(!this.title||!this.content)return void alert("값이 비워져 있습니다....");const t=this.createTodo(),e=new c(t,this.handleMinusCount);a(`.${this.status}`).insertAdjacentHTML("afterend",e.render()),e.handleEventListener(),a(`.input-${this.status}`)?.remove(),this.setOnInput(!1);const n={};n.title=this.title,n.status=this.status;const s=l(n,"등록");d(s),this.handleAddCount()};render=()=>`\n        <article class="input-wrapper todo-border input-${this.status}">\n            <input class="input-header"placeholder="제목을 입력하세요" />\n            <textarea class="input-content" placeholder="내용을 입력하세요" maxlength ='500' ></textarea>\n            <div class="input-button-wrapper">\n                <button class="input__button input--cancel">취소</button>\n                <button class="input__button input--register bg-sky-blue" disabled>등록</button>\n            </div>\n        </article>\n    `;handleEventListener=()=>{a(`.input-${this.status} .input--cancel`).addEventListener("click",this.onCloseBtn),a(`.input-${this.status} .input-header`).addEventListener("input",this.onInputHeader),a(`.input-${this.status} .input-content`).addEventListener("input",this.onInputContent),a(`.input-${this.status} .input--register`).addEventListener("click",this.onRegisterBtn)}}class m{constructor(t){this.status=t,this.modifyStatus="",this.todoInput=new h(this.status,this.setOnInput,this.handleAddCount,this.handleMinusCount),this.onInput=!1,this.count=0}setOnInput=t=>{this.onInput=t};onAddClick=()=>{if(this.onInput)return a(`.input-${this.status}`)?.remove(),void this.setOnInput(!1);a(`.${this.status}`).insertAdjacentHTML("afterend",this.todoInput.render()),this.todoInput.handleEventListener(),this.setOnInput(!0)};handleAddCount=()=>{this.onAddCount(),this.renderCount()};handleMinusCount=()=>{this.onMinusCount(),this.renderCount()};setCount=t=>{this.count=t};onAddCount=()=>{this.count++};onMinusCount=()=>{this.count--};renderCount=()=>{a(`.${this.status} .column__count`).innerText=this.count};onDeleteClick=()=>{const t=a(`.${this.status}-wrapper`).dataset.status,n=e("column").filter((e=>e!==t)),s=e("todos").filter((e=>e.status!==t));localStorage.setItem("todos",JSON.stringify(s)),localStorage.setItem("column",JSON.stringify(n)),a(`.${this.status}-wrapper`)?.remove()};onEditClick=()=>{a(`.${this.status} .column__left`).innerHTML='<input type="text" class="editedTitle">',a(`.${this.status} .editedTitle`).addEventListener("input",this.onEditInput)};onEditTitle=({target:t})=>{t.classList.contains("editedTitle")||this.modifyStatus&&(a(`.${this.status} .column__left`).innerHTML=`<span class="column__title">${this.modifyStatus}</span>`,this.status=this.modifyStatus)};onEditInput=t=>{this.modifyStatus=t.target.value};handleEventListener=()=>{a(`.${this.status} .column__title`).addEventListener("dblclick",this.onEditClick),a(`.${this.status} .column__add`).addEventListener("click",this.onAddClick),a(`.${this.status} .column__delete`).addEventListener("click",this.onDeleteClick),document.body.addEventListener("click",this.onEditTitle)};render=()=>`\n    <article class="column-list ${this.status}-wrapper" data-status="${this.status}">\n        <nav class="column ${this.status}">\n            <div class="column__left">\n                <span class="column__title">${this.status}</span>\n                <div class="column__count">${this.count}</div>\n            </div>\n            <div class="column__right">\n            <button class="column__add">+</button>\n            <button class="column__delete">x</button>\n            </div>\n        </nav>\n        \n    </article>\n      `}const p=a(".drag");let v=null,_=null,g=null,b=null;const E=()=>{v=null,_=null,g=null,b=null};class f{constructor(){this.id=0,this.status="",this.count=0,this.isDeleted=!1}insertColumn=()=>`\n    <article class="column-list ${this.status}-wrapper" data-status="${this.status}">\n        <nav class="column ${this.status}">\n            <div class="column__left">\n                <span class="column__title">${this.status}</span>\n                <div class="column__count">${this.count}</div>\n            </div>\n            <div class="column__right">\n            <button class="column__add">+</button>\n            <button class="column__delete">x</button>\n            </div>\n        </nav>\n    </article>\n      `;fabModal=()=>'\n        <article class="input-wrapper todo-border input-fab">\n            <input class="input-header"placeholder="칼럼을 추가하세요" maxlength =\'500\' /> \n            <div class="input-button-wrapper">\n                <button class="input__button fab--cancel">취소</button>\n                <button class="input__button fab--register sky-blue">등록</button>\n            </div>\n        </article>\n        <div class="modalBackground"></div>\n    ';register=()=>{this.status=document.querySelector(".input-header").value;const t=e("column")??[];t.push(this.status),localStorage.setItem("column",JSON.stringify(t)),this.cancelBtn(),document.querySelector(".column-section").insertAdjacentHTML("beforeend",this.insertColumn())};cancelBtn=()=>{console.log("gg"),document.querySelector(".input-fab").remove(),document.querySelector(".modalBackground").remove()};showModal=()=>{document.body.insertAdjacentHTML("beforeend",this.fabModal()),document.querySelector(".input-fab .fab--cancel").addEventListener("click",this.cancelBtn),document.querySelector(".input-fab .fab--register").addEventListener("click",this.register)};handleEventListener=()=>{document.querySelector(".fabBtn").addEventListener("click",this.showModal)}}(()=>{const s=e("todos")??[],i=e("notices")??[];localStorage.setItem("todos",JSON.stringify(s)),localStorage.setItem("notices",JSON.stringify(i)),new t,document.body.addEventListener("mousedown",(t=>{const e=t.target.closest("[data-drag='true']");e&&(g=e.parentNode.getAttribute("data-status"),b=e.parentNode.getAttribute("data-status"),"card__delete"!==t.target.className&&null!==e&&"start"!==e.className&&(_=e,v=e.cloneNode(!0),_.classList.add("spectrum"),p.appendChild(v),p.style.left=t.pageX-p.offsetWidth/2+"px",p.style.top=t.pageY-p.offsetHeight/2+"px"))})),document.body.addEventListener("mousemove",(t=>{if(!v)return;const{pageX:e,pageY:n}=t;p.hidden=!0;const s=document.elementFromPoint(e,n),i=s.closest(".card"),o=s.closest(".column-list");p.hidden=!1,p.style.left=e-p.offsetWidth/2+"px",p.style.top=n-p.offsetHeight/2+"px",o&&(b=o.getAttribute("data-status"),i?((t,e)=>{if(e.parentNode===t.parentNode){let n=t.previousSibling;for(;n;){if(n===e)return!0;n=n.previousSibling}}return!1})(_,i)&&"start"!==i.className?i.parentNode.insertBefore(_,i):i.parentNode&&i.parentNode.insertBefore(_,i.nextSibling):o.appendChild(_))})),document.body.addEventListener("mouseup",(t=>{if(_&&_.classList.remove("spectrum"),"card"!==t.target.className||b===g)return v?.remove(),void E();if(v){const t=Number(v.id),e={};e.id=t,e.status=b,n(e,t),v?.remove();const[s,i]=[v.querySelector(".card__title").innerText.trim(),v.querySelector(".card__content").innerText.trim()],o={};o.title=s,o.status=b,o.content=i,o.firstStatus=g;const a=l(o,"이동");d(a),E()}})),document.body.addEventListener("contextmenu",(t=>{"card"!==t.target.className||t.preventDefault()})),(()=>{const t=["해야할일","하고있는일","완료한일"];localStorage.setItem("column",JSON.stringify(t));const n=a(".column-section");t.forEach((t=>{const s=new m(t),i=(t=>{const n=e("todos");if(n)return n.filter((e=>e.status===t))})(t),o=i.length;s.setCount(o),n.insertAdjacentHTML("beforeend",s.render()),s.handleEventListener(),i.forEach((t=>{const e=new c(t,s.handleMinusCount);a(`.${t.status}`).insertAdjacentHTML("afterend",e.render()),e.handleEventListener()}))}))})(),(e("notices")??[]).forEach((t=>{d(t)})),(new f).handleEventListener()})()})();
//# sourceMappingURL=bundle.js.map